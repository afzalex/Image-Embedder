package types;

import imageembedder.CoverStyle;
import java.awt.Image;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.function.Consumer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileView;
import resources.ResourceHelper;
import types.EmbedType.Name;

public class CustomImageCard extends CardItem {

    private JFileChooser fileChooser = new JFileChooser(new File("E:\\picture store\\Pro"));

    private final FileView fileView = new FileView() {

        ImageIcon jpgIcon = createImageIcon("filetype_jpg.png");
        ImageIcon pngIcon = createImageIcon("filetype_png.png");

        private ImageIcon createImageIcon(String res) {
            Image img = ResourceHelper.getImageObject(res).getScaledInstance(15, 15, Image.SCALE_SMOOTH);
            if (img != null) {
                return new ImageIcon(img);
            } else {
                ResourceHelper.errLog("CustomImageCard > FileView fileView > createImageIcon("
                        + res + ") > Couldn't find file: " + res);
                return null;
            }
        }

        @Override
        public Icon getIcon(File f) {
            Icon icon = null;
            String name = f.getName();
            if (name.matches("(?i).+\\.jp(e?)g$")) {
                icon = jpgIcon;
            } else if (name.matches("(?i).+\\.png$")) {
                icon = pngIcon;
            }
            return icon;
        }
    };

    URL[] info_urls = {};
    CoverStyle info_covertype = CoverStyle.STRETCH;
    boolean info_doShuffle = false;

    /**
     * Creates new form TypeCustomImagePanel
     */
    public CustomImageCard() {
        preInitComponents();
        initComponents();
        postInitComponents();
    }

    private void preInitComponents() {
        fileChooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File pathname) {
                if (pathname.isDirectory() || pathname.getName().matches("(?i).+\\.((png)|(jp(e?)g))$")) {
                    return true;
                }
                return false;
            }

            @Override
            public String getDescription() {
                return "Directory, JPEG, JPG and PNG Images";
            }
        });
        fileChooser.setFileView(fileView);
        fileChooser.setAccessory(new ImagePreview(fileChooser));
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    }

    private void postInitComponents() {
        shuffleCheckBox.setEnabled(false);
    }

    private void evalImageLocField() {
        String[] strs = imageLocField.getText().split(",\\s*");
        try {
            ArrayList<URL> urls = new ArrayList<>();
            for (String s : strs) {
                URL url = new URL(s);
                urls.add(url);
            }
            URL[] urlarr = new URL[urls.size()];
            urlarr = urls.toArray(urlarr);
            info_urls = urlarr;
            message.setText("");
        } catch (MalformedURLException ex) {
            message.setText("Invalid URL");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        coverGroup = new javax.swing.ButtonGroup();
        imageLocLabel = new javax.swing.JLabel();
        imageLocField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        doFitRadio = new javax.swing.JRadioButton();
        doFitRadio.setActionCommand(imageembedder.CoverStyle.FIT.ACTION_COMMAND_STRING);
        coverGroup.add(doFitRadio);
        doFillRadio = new javax.swing.JRadioButton();
        doFillRadio.setActionCommand(imageembedder.CoverStyle.FILL.ACTION_COMMAND_STRING);
        coverGroup.add(doFillRadio);
        doStretchRadio = new javax.swing.JRadioButton();
        doStretchRadio.setActionCommand(imageembedder.CoverStyle.STRETCH.ACTION_COMMAND_STRING);
        coverGroup.add(doStretchRadio);
        picPositionLabel = new javax.swing.JLabel();
        shuffleCheckBox = new javax.swing.JCheckBox();
        isUrlCheckBox = new javax.swing.JCheckBox();
        message = new javax.swing.JLabel();

        imageLocLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        imageLocLabel.setLabelFor(imageLocField);
        imageLocLabel.setText("Image Location(s) :  ");

        imageLocField.setEditable(false);
        imageLocField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                imageLocFieldFocusLost(evt);
            }
        });
        imageLocField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageLocFieldActionPerformed(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        doFitRadio.setText("Fit in area");
        doFitRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coverChanged(evt);
            }
        });

        doFillRadio.setText("Fill area");
        doFillRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coverChanged(evt);
            }
        });

        doStretchRadio.setSelected(true);
        doStretchRadio.setText("Stretch in area");
        doStretchRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coverChanged(evt);
            }
        });

        picPositionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        picPositionLabel.setText("Piture Position :  ");

        shuffleCheckBox.setText("Shuffle");

        isUrlCheckBox.setText("URL");
        isUrlCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isUrlCheckBoxActionPerformed(evt);
            }
        });

        message.setForeground(new java.awt.Color(255, 51, 51));
        message.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(imageLocLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(picPositionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(imageLocField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(doFitRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(doFillRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(doStretchRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                                .addComponent(isUrlCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(shuffleCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageLocLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(imageLocField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doFitRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doFillRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doStretchRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(picPositionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shuffleCheckBox)
                    .addComponent(isUrlCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void coverChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coverChanged
        info_covertype = CoverStyle.parseEmbedImageCoverType(evt.getActionCommand());
    }//GEN-LAST:event_coverChanged

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        int res = fileChooser.showDialog(this, "Select");
        if (res == 0) {
            File[] selectedFiles = fileChooser.getSelectedFiles();
            if (selectedFiles != null) {
                String selectedFilesStr = "";
                File file;
                ArrayList<URL> urls = new ArrayList<>();
                Consumer<File> addurls = f -> {
                    try {
                        urls.add(f.toURI().toURL());
                    } catch (MalformedURLException ex) {
                        ResourceHelper.errLog("CustomImageCard > browseButtonActionPerformed(...)"
                                + " > Unable to add URL : " + ex);
                    }
                };
                for (int i = 0; i < selectedFiles.length - 1; i++) {
                    file = selectedFiles[i];
                    selectedFilesStr += "\"" + file.getName() + "\", ";
                    addurls.accept(file);
                }
                file = selectedFiles[selectedFiles.length - 1];
                selectedFilesStr += "\"" + file.getName() + "\"";
                addurls.accept(file);
                if (selectedFiles.length > 1 || selectedFiles[selectedFiles.length - 1].isDirectory()) {
                    shuffleCheckBox.setEnabled(true);
                } else {
                    shuffleCheckBox.setSelected(false);
                    shuffleCheckBox.setEnabled(false);
                }
                addurls.accept(file);
                URL[] urllist = new URL[urls.size()];
                urllist = urls.toArray(urllist);
                info_urls = urllist;
                imageLocField.setText(selectedFilesStr);
            }
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void isUrlCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isUrlCheckBoxActionPerformed
        message.setText("");
        if (isUrlCheckBox.isSelected()) {
            imageLocField.setText("http://");
            imageLocField.setEditable(true);
            browseButton.setEnabled(false);
            shuffleCheckBox.setSelected(false);
            shuffleCheckBox.setEnabled(false);
        } else {
            imageLocField.setText("");
            imageLocField.setEditable(false);
            browseButton.setEnabled(true);
        }
    }//GEN-LAST:event_isUrlCheckBoxActionPerformed

    private void imageLocFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageLocFieldActionPerformed
        evalImageLocField();
    }//GEN-LAST:event_imageLocFieldActionPerformed

    private void imageLocFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_imageLocFieldFocusLost
        evalImageLocField();
    }//GEN-LAST:event_imageLocFieldFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.ButtonGroup coverGroup;
    private javax.swing.JRadioButton doFillRadio;
    private javax.swing.JRadioButton doFitRadio;
    private javax.swing.JRadioButton doStretchRadio;
    private javax.swing.JTextField imageLocField;
    private javax.swing.JLabel imageLocLabel;
    private javax.swing.JCheckBox isUrlCheckBox;
    private javax.swing.JLabel message;
    private javax.swing.JLabel picPositionLabel;
    private javax.swing.JCheckBox shuffleCheckBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void reset() {
        imageLocField.setText("");
        doFitRadio.setSelected(false);
        doFillRadio.setSelected(false);
        doStretchRadio.setSelected(true);
        isUrlCheckBox.setSelected(false);
        shuffleCheckBox.setSelected(false);
        browseButton.setEnabled(true);
    }

    @Override
    public void resetFromEmbedType(EmbedType embedType) {
        if (embedType.getClass() == EmbedTypeCustomImage.class) {
            EmbedTypeCustomImage embedTypeCustomImage = (EmbedTypeCustomImage) embedType;
            String selectedFilesStr = "";
            info_urls = embedTypeCustomImage.getUrls();
            if (info_urls != null && info_urls.length > 0) {
                if (info_urls[0].getProtocol().equals("file")) {
                    try {
                        ArrayList<File> fileal = new ArrayList<>();
                        for (URL url : info_urls) {
                            fileal.add(new File(url.toURI()));
                        }
                        File[] filearr = new File[fileal.size()];
                        filearr = fileal.toArray(filearr);
                        fileChooser.setSelectedFiles(filearr);

                        File file;
                        for (int i = 0; i < filearr.length - 1; i++) {
                            file = filearr[i];
                            selectedFilesStr += "\"" + file.getName() + "\", ";
                        }
                        file = filearr[filearr.length - 1];
                        selectedFilesStr += "\"" + file.getName() + "\"";
                    } catch (URISyntaxException ex) {
                        ResourceHelper.errLog("CustomImageCard > resetEmbedTypeElements() "
                                + "> cannot set URL's : " + ex);
                    }
                    if (info_urls.length > 1) {
                        shuffleCheckBox.setEnabled(true);
                        shuffleCheckBox.setSelected(embedTypeCustomImage.isDoShuffle());
                    }
                    isUrlCheckBox.setSelected(false);
                } else {
                    for (int i = 0; i < info_urls.length - 1; i++) {
                        selectedFilesStr += "\"" + info_urls[i].toString() + "\", ";
                    }
                    selectedFilesStr += "\"" + info_urls[info_urls.length - 1].toString() + "\"";
                    isUrlCheckBox.setSelected(true);
                }
            }
            imageLocField.setText(selectedFilesStr);
            CoverStyle covertype = embedTypeCustomImage.getCovertype();
            info_covertype = covertype;
            if (covertype == CoverStyle.FIT) {
                doFitRadio.setSelected(true);
            } else if (covertype == CoverStyle.FILL) {
                doFillRadio.setSelected(true);
            } else {
                doStretchRadio.setSelected(true);
            }
        } else {
            reset();
        }
    }

    @Override
    void loadIntoEmbedType(EmbedType embedType) {
        if (embedType.getName() == Name.CustomImage) {
            EmbedTypeCustomImage et = (EmbedTypeCustomImage) embedType;
            et.setCovertype(info_covertype);
            et.setDoShuffle(info_doShuffle);
            et.setUrls(info_urls);
        }
    }

    @Override
    EmbedType.Name getEmbedTypeName() {
        return EmbedType.Name.CustomImage;
    }

}
